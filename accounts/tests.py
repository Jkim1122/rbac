############# This test file was generated by ChatGPT #################

from django.test import TestCase
from django.urls import reverse
from django.contrib.auth.models import User, Group
from django.contrib.auth import get_user_model

class AccountsTests(TestCase):

    def setUp(self):
        # Create the roles/groups
        admin_group, _ = Group.objects.get_or_create(name='Admin')
        user_group, _ = Group.objects.get_or_create(name='User')

        # Create an Admin user
        self.admin_user = User.objects.create_user(
            username='admin_user',
            password='AdminPassword123!'
        )
        self.admin_user.groups.add(admin_group)

        # Create a regular User
        self.regular_user = User.objects.create_user(
            username='regular_user',
            password='UserPassword123!'
        )
        self.regular_user.groups.add(user_group)

    def test_001_signup_view_get(self):
        response = self.client.get(reverse('signup'))
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'accounts/signup.html')

    def test_002_signup_view_post_valid(self):
        response = self.client.post(reverse('signup'), {
            'username': 'newuser',
            'email': 'newuser@example.com',
            'password1': 'NewUserPassword123!',
            'password2': 'NewUserPassword123!',
        })
        self.assertRedirects(response, reverse('signup_success'))
        self.assertTrue(User.objects.filter(username='newuser').exists())

    def test_003_signup_view_post_invalid(self):
        response = self.client.post(reverse('signup'), {
            'username': 'newuser',
            'email': 'newuser@example.com',
            'password1': 'short',
            'password2': 'short',
        })
        self.assertTemplateUsed(response, 'accounts/signup_failure.html')
        self.assertFalse(User.objects.filter(username='newuser').exists())

    def test_004_login_view_get(self):
        response = self.client.get(reverse('login'))
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'accounts/login.html')

    def test_005_login_view_post_valid(self):
        response = self.client.post(reverse('login'), {
            'username': 'regular_user',
            'password': 'UserPassword123!',
        })
        self.assertRedirects(response, reverse('profile'))

    def test_006_login_view_post_invalid(self):
        response = self.client.post(reverse('login'), {
            'username': 'regular_user',
            'password': 'wrongpassword',
        })
        self.assertTemplateUsed(response, 'accounts/login.html')
        # self.assertContains(response, "Please enter a correct username and password.")

    def test_007_profile_view_for_admin(self):
        self.client.login(username='admin_user', password='AdminPassword123!')
        response = self.client.get(reverse('profile'))
        self.assertEqual(response.status_code, 200)
        self.assertTrue(response.context['is_admin'])
        self.assertFalse(response.context['is_user'])
        self.assertTemplateUsed(response, 'accounts/profile.html')
        # self.assertContains(response, "Admin Panel")

    def test_008_profile_view_for_user(self):
        self.client.login(username='regular_user', password='UserPassword123!')
        response = self.client.get(reverse('profile'))
        self.assertEqual(response.status_code, 200)
        self.assertFalse(response.context['is_admin'])
        self.assertTrue(response.context['is_user'])
        self.assertTemplateUsed(response, 'accounts/profile.html')
        # self.assertContains(response, "User Dashboard")

    def test_009_logout_view(self):
        self.client.login(username='regular_user', password='UserPassword123!')
        response = self.client.post(reverse('logout'))
        self.assertRedirects(response, reverse('logout_success'))
# from django.test import TestCase
# from django.contrib.auth.models import Group, Permission, User
# from django.contrib.contenttypes.models import ContentType

# class RoleCreationTests(TestCase):

#     def setUp(self):
#         # Manually trigger the post_migrate signal to create roles
#         from django.core.management import call_command
#         call_command('migrate')

#     def test_admin_group_permissions(self):
#         admin_group = Group.objects.get(name='Admin')
#         expected_perms = ['view_user', 'change_user', 'delete_user']
#         for perm in expected_perms:
#             self.assertTrue(admin_group.permissions.filter(codename=perm).exists())

#     def test_moderator_group_permissions(self):
#         moderator_group = Group.objects.get(name='Moderator')
#         expected_perms = ['view_user', 'change_user']
#         for perm in expected_perms:
#             self.assertTrue(moderator_group.permissions.filter(codename=perm).exists())

#     def test_user_group_permissions(self):
#         user_group = Group.objects.get(name='User')
#         expected_perms = ['view_user', 'change_user']
#         for perm in expected_perms:
#             self.assertTrue(user_group.permissions.filter(codename=perm).exists())

#     def test_guest_group_permissions(self):
#         guest_group = Group.objects.get(name='Guest')
#         expected_perms = ['view_user']
#         for perm in expected_perms:
#             self.assertTrue(guest_group.permissions.filter(codename=perm).exists())

#     def test_non_existent_permission(self):
#         non_existent_perm = 'fake_permission'
#         admin_group = Group.objects.get(name='Admin')
#         self.assertFalse(admin_group.permissions.filter(codename=non_existent_perm).exists())

#     def test_superuser_has_all_permissions(self):
#         superuser = User.objects.create_superuser('superuser', 'superuser@example.com', 'password')
#         all_permissions = Permission.objects.all()
#         for perm in all_permissions:
#             self.assertTrue(superuser.has_perm(f'{perm.content_type.app_label}.{perm.codename}'))

#     def test_create_user_and_assign_group(self):
#         user = User.objects.create_user(username='testuser', password='password')
#         group = Group.objects.get(name='User')
#         user.groups.add(group)
#         self.assertIn(group, user.groups.all())

#     def test_create_guest_and_assign_group(self):
#         guest = User.objects.create_user(username='guestuser', password='password')
#         group = Group.objects.get(name='Guest')
#         guest.groups.add(group)
#         self.assertIn(group, guest.groups.all())
#         self.assertTrue(guest.groups.filter(name='Guest').exists())

#     def test_create_moderator_and_assign_group(self):
#         moderator = User.objects.create_user(username='moderatoruser', password='password')
#         group = Group.objects.get(name='Moderator')
#         moderator.groups.add(group)
#         self.assertIn(group, moderator.groups.all())
#         self.assertTrue(moderator.groups.filter(name='Moderator').exists())
